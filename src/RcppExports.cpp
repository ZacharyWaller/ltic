// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ltic_r
List ltic_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0);
RcppExport SEXP _ltic_ltic_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    rcpp_result_gen = Rcpp::wrap(ltic_r(lambda, l, r, t, R0));
    return rcpp_result_gen;
END_RCPP
}
// monotone
Rcpp::NumericVector monotone(Rcpp::NumericVector x, Rcpp::NumericVector w);
RcppExport SEXP _ltic_monotone(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(monotone(x, w));
    return rcpp_result_gen;
END_RCPP
}
// calc_like
NumericVector calc_like(NumericVector lambda, IntegerVector left, IntegerVector right);
RcppExport SEXP _ltic_calc_like(SEXP lambdaSEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type left(leftSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_like(lambda, left, right));
    return rcpp_result_gen;
END_RCPP
}
// calc_like_lambda
NumericVector calc_like_lambda(NumericVector lambda, IntegerVector left, IntegerVector right);
RcppExport SEXP _ltic_calc_like_lambda(SEXP lambdaSEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type left(leftSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_like_lambda(lambda, left, right));
    return rcpp_result_gen;
END_RCPP
}
// calc_derivs
List calc_derivs(NumericVector lambda, IntegerVector left, IntegerVector right);
RcppExport SEXP _ltic_calc_derivs(SEXP lambdaSEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type left(leftSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_derivs(lambda, left, right));
    return rcpp_result_gen;
END_RCPP
}
// shen_r
List shen_r(NumericVector s, IntegerVector l, IntegerVector r, IntegerVector t);
RcppExport SEXP _ltic_shen_r(SEXP sSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(shen_r(s, l, r, t));
    return rcpp_result_gen;
END_RCPP
}
// turnbull_r
List turnbull_r(NumericVector s, IntegerVector l, IntegerVector r, IntegerVector t);
RcppExport SEXP _ltic_turnbull_r(SEXP sSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(turnbull_r(s, l, r, t));
    return rcpp_result_gen;
END_RCPP
}
// yu_r
List yu_r(NumericVector s, IntegerVector l, IntegerVector r, IntegerVector t);
RcppExport SEXP _ltic_yu_r(SEXP sSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(yu_r(s, l, r, t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ltic_ltic_r", (DL_FUNC) &_ltic_ltic_r, 5},
    {"_ltic_monotone", (DL_FUNC) &_ltic_monotone, 2},
    {"_ltic_calc_like", (DL_FUNC) &_ltic_calc_like, 3},
    {"_ltic_calc_like_lambda", (DL_FUNC) &_ltic_calc_like_lambda, 3},
    {"_ltic_calc_derivs", (DL_FUNC) &_ltic_calc_derivs, 3},
    {"_ltic_shen_r", (DL_FUNC) &_ltic_shen_r, 4},
    {"_ltic_turnbull_r", (DL_FUNC) &_ltic_turnbull_r, 4},
    {"_ltic_yu_r", (DL_FUNC) &_ltic_yu_r, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ltic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
