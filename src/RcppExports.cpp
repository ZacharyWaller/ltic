// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// binomial_r
List binomial_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_binomial_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// bres_comb_r
List bres_comb_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_bres_comb_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(bres_comb_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// breslow_r
List breslow_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_breslow_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(breslow_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// icm_r
List icm_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, double toler, int max_it);
RcppExport SEXP _ltic_icm_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(icm_r(lambda, l, r, t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// length_bias_r
List length_bias_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, NumericVector del_t, double toler, int max_it);
RcppExport SEXP _ltic_length_bias_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP del_tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type del_t(del_tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(length_bias_r(lambda, l, r, t, R0, del_t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// ltic_r
List ltic_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_ltic_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(ltic_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// ltic_s_r
List ltic_s_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_ltic_s_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(ltic_s_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// ltic_turn_r
List ltic_turn_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, double toler, int max_it);
RcppExport SEXP _ltic_ltic_turn_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(ltic_turn_r(lambda, l, r, t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// ltic_yu_r
List ltic_yu_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, double toler, int max_it);
RcppExport SEXP _ltic_ltic_yu_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(ltic_yu_r(lambda, l, r, t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// monotone
Rcpp::NumericVector monotone(Rcpp::NumericVector x, Rcpp::NumericVector w);
RcppExport SEXP _ltic_monotone(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(monotone(x, w));
    return rcpp_result_gen;
END_RCPP
}
// prodlim_r
List prodlim_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_prodlim_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(prodlim_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// calc_like_r
NumericVector calc_like_r(NumericVector step, IntegerVector left, IntegerVector right, IntegerVector trun, int n_obs, int n_int);
RcppExport SEXP _ltic_calc_like_r(SEXP stepSEXP, SEXP leftSEXP, SEXP rightSEXP, SEXP trunSEXP, SEXP n_obsSEXP, SEXP n_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type step(stepSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type left(leftSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type right(rightSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type trun(trunSEXP);
    Rcpp::traits::input_parameter< int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< int >::type n_int(n_intSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_like_r(step, left, right, trun, n_obs, n_int));
    return rcpp_result_gen;
END_RCPP
}
// calc_derivs_r
NumericVector calc_derivs_r(NumericVector step, IntegerVector left, IntegerVector right, IntegerVector trun, int n_obs, int n_int);
RcppExport SEXP _ltic_calc_derivs_r(SEXP stepSEXP, SEXP leftSEXP, SEXP rightSEXP, SEXP trunSEXP, SEXP n_obsSEXP, SEXP n_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type step(stepSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type left(leftSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type right(rightSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type trun(trunSEXP);
    Rcpp::traits::input_parameter< int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< int >::type n_int(n_intSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_derivs_r(step, left, right, trun, n_obs, n_int));
    return rcpp_result_gen;
END_RCPP
}
// shen_r
List shen_r(NumericVector s, IntegerVector l, IntegerVector r, IntegerVector t, double toler, int max_it);
RcppExport SEXP _ltic_shen_r(SEXP sSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(shen_r(s, l, r, t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// test_r
List test_r(NumericVector lambda, IntegerVector l, IntegerVector r, IntegerVector t, IntegerVector R0, IntegerVector l_full, IntegerVector r_full, IntegerVector t_full, double toler, int max_it);
RcppExport SEXP _ltic_test_r(SEXP lambdaSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP R0SEXP, SEXP l_fullSEXP, SEXP r_fullSEXP, SEXP t_fullSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l_full(l_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_full(r_fullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t_full(t_fullSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(test_r(lambda, l, r, t, R0, l_full, r_full, t_full, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// turnbull_r
List turnbull_r(NumericVector s, IntegerVector l, IntegerVector r, IntegerVector t, double toler, int max_it);
RcppExport SEXP _ltic_turnbull_r(SEXP sSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(turnbull_r(s, l, r, t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}
// yu_r
List yu_r(NumericVector s, IntegerVector l, IntegerVector r, IntegerVector t, double toler, int max_it);
RcppExport SEXP _ltic_yu_r(SEXP sSEXP, SEXP lSEXP, SEXP rSEXP, SEXP tSEXP, SEXP tolerSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(yu_r(s, l, r, t, toler, max_it));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ltic_binomial_r", (DL_FUNC) &_ltic_binomial_r, 10},
    {"_ltic_bres_comb_r", (DL_FUNC) &_ltic_bres_comb_r, 10},
    {"_ltic_breslow_r", (DL_FUNC) &_ltic_breslow_r, 10},
    {"_ltic_icm_r", (DL_FUNC) &_ltic_icm_r, 6},
    {"_ltic_length_bias_r", (DL_FUNC) &_ltic_length_bias_r, 8},
    {"_ltic_ltic_r", (DL_FUNC) &_ltic_ltic_r, 10},
    {"_ltic_ltic_s_r", (DL_FUNC) &_ltic_ltic_s_r, 10},
    {"_ltic_ltic_turn_r", (DL_FUNC) &_ltic_ltic_turn_r, 6},
    {"_ltic_ltic_yu_r", (DL_FUNC) &_ltic_ltic_yu_r, 6},
    {"_ltic_monotone", (DL_FUNC) &_ltic_monotone, 2},
    {"_ltic_prodlim_r", (DL_FUNC) &_ltic_prodlim_r, 10},
    {"_ltic_calc_like_r", (DL_FUNC) &_ltic_calc_like_r, 6},
    {"_ltic_calc_derivs_r", (DL_FUNC) &_ltic_calc_derivs_r, 6},
    {"_ltic_shen_r", (DL_FUNC) &_ltic_shen_r, 6},
    {"_ltic_test_r", (DL_FUNC) &_ltic_test_r, 10},
    {"_ltic_turnbull_r", (DL_FUNC) &_ltic_turnbull_r, 6},
    {"_ltic_yu_r", (DL_FUNC) &_ltic_yu_r, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ltic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
